class Solution {
    private int[][] dirs = {{1,0},{-1,0},{0,1},{0,-1}};
    private int[][] memo;
    private int m, n;

    public int longestIncreasingPath(int[][] matrix) {
        m = matrix.length;
        n = matrix[0].length;
        memo = new int[m][n];
        int ans = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                ans = Math.max(ans, dfs(matrix, i, j, -1));
            }
        }
        return ans;
    }

    private int dfs(int[][] matrix, int i, int j, int prev) {
        if (i < 0 || i >= m || j < 0 || j >= n || matrix[i][j] <= prev) return 0;
        if (memo[i][j] != 0) return memo[i][j];
        int max = 1;
        for (int[] d : dirs) {
            max = Math.max(max, 1 + dfs(matrix, i+d[0], j+d[1], matrix[i][j]));
        }
        memo[i][j] = max;
        return max;
    }
}
